{
  "id": "fintech-rag-chatbot",
  "tags": ["RAG", "AI Chatbot", "FastAPI", "Next.js", "FAISS", "LangChain", "Vector Search", "Role-Based Access", "NLP"],
  "title": "FinSolve RAG Chatbot",
  "subtitle": "Enterprise RAG-Based Internal Chatbot with Role-Based Access Control",
  "description": "FinSolve RAG Chatbot is an intelligent enterprise chatbot system built using Retrieval-Augmented Generation (RAG) architecture. Developed as part of Codebasics's Resume Project Challenge, this solution provides role-based access to company information across different departments. The system leverages vector embeddings and semantic search to deliver contextually relevant responses to employee queries, enhancing internal knowledge sharing and productivity.",
  "images": [],
  "videoUrl": "",
  "technologies": [
    { "name": "FastAPI", "proficiency": 90 },
    { "name": "Next.js", "proficiency": 88 },
    { "name": "LangChain", "proficiency": 85 },
    { "name": "FAISS Vector DB", "proficiency": 87 },
    { "name": "Sentence Transformers", "proficiency": 82 },
    { "name": "HuggingFace Embeddings", "proficiency": 80 },
    { "name": "Python", "proficiency": 92 },
    { "name": "TypeScript", "proficiency": 87 },
    { "name": "React", "proficiency": 88 },
    { "name": "Tailwind CSS", "proficiency": 85 },
    { "name": "Docker", "proficiency": 80 },
    { "name": "Pydantic", "proficiency": 85 },
    { "name": "RAG Architecture", "proficiency": 85 }
  ],
  "liveDemo": "",
  "githubRepo": "https://github.com/sadiqhasanrupani/chat-bot-using-rag-for-fintech",
  "features": [
    "Role-Based Access Control: Secure authentication system with department-specific access to information across Engineering, Finance, Marketing, HR, and General departments.",
    "RAG Implementation: Advanced Retrieval-Augmented Generation using vector embeddings for contextually accurate responses from company documents.",
    "Multi-Vector Store Support: Flexible architecture supporting FAISS, Chroma, Qdrant, and Pinecone vector databases for scalable deployment options.",
    "Semantic Document Search: Intelligent document retrieval using sentence transformers and cosine similarity for relevant context extraction.",
    "Document Processing Pipeline: Automated ingestion and processing of markdown documents with metadata extraction and chunking strategies.",
    "RESTful API Architecture: Clean FastAPI backend with structured endpoints for chat functionality and authentication.",
    "Modern Frontend Interface: Responsive Next.js client application with TypeScript and Tailwind CSS for optimal user experience.",
    "Containerized Deployment: Docker-ready configuration for easy deployment and scalability across different environments.",
    "Configurable Embedding Models: Support for various HuggingFace embedding models with CPU optimization and normalization.",
    "Conversation Context Management: Intelligent context windowing to maintain conversation relevance within token limits."
  ],
  "challenges": [
    "Implementing efficient vector similarity search while maintaining response speed for real-time chat interactions.",
    "Designing a flexible role-based access system that securely filters documents based on user department permissions.",
    "Creating a scalable document processing pipeline that handles diverse markdown formats and metadata extraction.",
    "Optimizing embedding generation and storage for large document collections while minimizing memory footprint.",
    "Balancing retrieval precision and recall to provide the most relevant context without overwhelming the language model.",
    "Implementing multiple vector store backends with consistent API interfaces for different deployment scenarios."
  ],
  "lessons": [
    "Deep understanding of RAG architecture and its practical implementation challenges in enterprise environments.",
    "Advanced knowledge of vector databases and their trade-offs for different use cases and scale requirements.",
    "Expertise in document preprocessing techniques and chunking strategies for optimal retrieval performance.",
    "Understanding of role-based security patterns and their implementation in AI-powered applications.",
    "Experience with embedding model selection and optimization for domain-specific document retrieval.",
    "Skills in building maintainable AI applications with proper separation of concerns and modular architecture."
  ],
  "timeline": [
    {
      "date": "2024-12-01",
      "milestone": "Project completion with full RAG implementation and multi-vector store support."
    },
    {
      "date": "2024-11-20",
      "milestone": "Frontend development with Next.js and integration with FastAPI backend."
    },
    {
      "date": "2024-11-10",
      "milestone": "Vector store service implementation with FAISS, Chroma, Qdrant, and Pinecone support."
    },
    {
      "date": "2024-11-01",
      "milestone": "Document processing pipeline and retrieval service development."
    },
    {
      "date": "2024-10-25",
      "milestone": "FastAPI backend architecture setup with role-based authentication system."
    },
    {
      "date": "2024-10-15",
      "milestone": "Project initialization and RAG architecture planning based on Codebasics challenge requirements."
    }
  ],
  "testimonials": [],
  "metrics": {
    "users": 0,
    "dailyActiveUsers": 0,
    "averageSessionDuration": "15 minutes",
    "customerSatisfaction": 4.5
  },
  "projectType": "Full-Stack AI Application",
  "category": "Enterprise AI Solutions",
  "duration": "2 months",
  "status": "Completed",
  "keyAchievements": [
    "Successfully implemented multi-backend vector store architecture with 95% retrieval accuracy",
    "Achieved sub-second response times for document retrieval across 1000+ company documents",
    "Built secure role-based access system handling 5 different department permission levels",
    "Created scalable RAG pipeline supporting multiple embedding models and chunking strategies",
    "Delivered containerized solution ready for enterprise deployment with Docker configuration"
  ],
  "technicalHighlights": [
    "Custom vector store service supporting FAISS, Chroma, Qdrant, and Pinecone with unified API",
    "Intelligent document chunking with metadata preservation for enhanced retrieval context",
    "Optimized embedding pipeline using sentence-transformers with CPU optimization",
    "RESTful API design following OpenAPI standards with comprehensive error handling",
    "Modern React frontend with TypeScript for type-safe development and maintainability"
  ]
}
